
==================== Tidy Core ====================
2017-10-20 12:59:28.87674 UTC

Result size of Tidy Core
  = {terms: 168, types: 203, coercions: 9, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep :: KindRep
$krep = KindRepTyConApp $tcInt []

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcBox2 :: Addr#
$tcBox2 = "Box"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcBox1 :: TrName
$tcBox1 = TrNameS $tcBox2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcBox :: TyCon
$tcBox
  = TyCon
      3762919943489504256##
      5463706964232835171##
      $trModule
      $tcBox1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1 :: KindRep
$krep1 = KindRepTyConApp $tcBox []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Box1 :: KindRep
$tc'Box1 = KindRepFun $krep $krep1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Box3 :: Addr#
$tc'Box3 = "'Box"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Box2 :: TrName
$tc'Box2 = TrNameS $tc'Box3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Box :: TyCon
$tc'Box
  = TyCon
      2750483572331382518##
      11996112659716245982##
      $trModule
      $tc'Box2
      0#
      $tc'Box1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
alfa :: [Int]
alfa = eftInt 0# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl :: Addr#
lvl = "src/Main.hs:23:40-63|case"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
main4 :: Box
main4 = patError lvl

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
external2 :: Int
external2 = I# 0#

-- RHS size: {terms: 34, types: 34, coercions: 0, joins: 0/0}
main3 :: State# RealWorld -> (# State# RealWorld, Bool #)
main3
  = \ (s :: State# RealWorld) ->
      case noDuplicate# s of s' { __DEFAULT ->
      case alfa of {
        [] -> case badHead of wild1 { };
        : x ds1 ->
          case x of wild1 { I# ds ->
          case ds of {
            __DEFAULT -> case main4 of wild2 { };
            0# ->
              case {__pkg_ccall_GC base-4.10.0.0 State# RealWorld
                              -> (# State# RealWorld #)}
                     s'
              of
              { (# ds3 #) ->
              (# ds3,
                 case reallyUnsafePtrEquality# wild1 external2 of {
                   __DEFAULT -> False;
                   1# -> True
                 } #)
              }
          }
          }
      }
      }

-- RHS size: {terms: 10, types: 31, coercions: 0, joins: 0/0}
main2 :: String
main2
  = case runRW# main3 of { (# ipv, ipv1 #) ->
    case ipv1 of {
      False -> $fShowBool3;
      True -> $fShowBool1
    }
    }

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
main1 :: State# RealWorld -> (# State# RealWorld, () #)
main1 = hPutStr2 stdout main2 True

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
main
  = main1
    `cast` (Sym (N:IO[0] <()>_R)
            :: ((State# RealWorld -> (# State# RealWorld, () #)) :: *)
               ~R#
               (IO () :: *))

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
main5 :: State# RealWorld -> (# State# RealWorld, () #)
main5
  = runMainIO1
      (main1
       `cast` (Sym (N:IO[0] <()>_R)
               :: ((State# RealWorld -> (# State# RealWorld, () #)) :: *)
                  ~R#
                  (IO () :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
main
  = main5
    `cast` (Sym (N:IO[0] <()>_R)
            :: ((State# RealWorld -> (# State# RealWorld, () #)) :: *)
               ~R#
               (IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1 :: Addr#
lvl1 = "src/Main.hs:27:40-63|case"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
external3 :: Box
external3 = patError lvl1

-- RHS size: {terms: 34, types: 34, coercions: 0, joins: 0/0}
external1 :: State# RealWorld -> (# State# RealWorld, Bool #)
external1
  = \ (s :: State# RealWorld) ->
      case noDuplicate# s of s' { __DEFAULT ->
      case alfa of {
        [] -> case badHead of wild1 { };
        : x ds1 ->
          case x of wild1 { I# ds ->
          case ds of {
            __DEFAULT -> case external3 of wild2 { };
            0# ->
              case {__pkg_ccall_GC base-4.10.0.0 State# RealWorld
                              -> (# State# RealWorld #)}
                     s'
              of
              { (# ds3 #) ->
              (# ds3,
                 case reallyUnsafePtrEquality# wild1 external2 of {
                   __DEFAULT -> False;
                   1# -> True
                 } #)
              }
          }
          }
      }
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
external :: Bool
external = case runRW# external1 of { (# ipv, ipv1 #) -> ipv1 }


