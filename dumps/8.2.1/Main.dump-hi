
==================== FINAL INTERFACE ====================
2017-10-20 12:59:28.881882 UTC

interface main:Main 8021
  interface hash: 5c4de5f47982865b11414918cb68d723
  ABI hash: 56e239b87c05b5720203533e6a3d5b55
  export-list hash: 209e1195efa1851c7d0adfe2b4242e2a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0a41d43cecaa41e7168ee92b41278fb0
  sig of: Nothing
  used TH splices: False
  where
exports:
  external
  main
module dependencies:
package dependencies: base-4.10.0.0 ghc-prim-0.5.1.0
                      integer-gmp-1.0.1.0
orphans: base-4.10.0.0:GHC.Base base-4.10.0.0:GHC.Float
family instance modules: base-4.10.0.0:Control.Applicative
                         base-4.10.0.0:Data.Either base-4.10.0.0:Data.Functor.Const
                         base-4.10.0.0:Data.Functor.Identity base-4.10.0.0:Data.Monoid
                         base-4.10.0.0:Data.Type.Equality base-4.10.0.0:GHC.Generics
                         base-4.10.0.0:GHC.IO.Exception base-4.10.0.0:GHC.TypeLits
                         base-4.10.0.0:GHC.TypeNats
import  -/  base-4.10.0.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.0.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.0.0:GHC.Int f3b679d79c8ad65bf2b736aa9628303f
import  -/  base-4.10.0.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.0.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.0.0:System.IO 8b95520c731191ee44bf123183b50278
import  -/  base-4.10.0.0:System.IO.Unsafe 00b3b8853d06169d9bfd9af46118ba88
import  -/  base-4.10.0.0:System.Mem 699461a0f9cd815a5f18336077501985
import  -/  ghc-prim-0.5.1.0:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.0:GHC.Prim 00000000000000000000000000000000
import  -/  ghc-prim-0.5.1.0:GHC.Types b1fd0716441595db508c1a74387bf394
a355da1b06b643fcfb5b91f8e84429db
  $tc'Box :: TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (TyCon
                   2750483572331382518##
                   11996112659716245982##
                   $trModule
                   $tc'Box2
                   0#
                   $tc'Box1) -}
a55f3f9f604afde7fb5472e3bed26882
  $tc'Box1 :: KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
559784fafb7996cb4dc1a7d775501bf7
  $tc'Box2 :: TrName
  {- HasNoCafRefs, Strictness: m1, Unfolding: (TrNameS $tc'Box3) -}
57c96f631f0d122db1bc5e112ae0614c
  $tc'Box3 :: Addr#
  {- HasNoCafRefs, Unfolding: ("'Box"#) -}
c5732208babbce90574ab0e0e0f5604f
  $tcBox :: TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (TyCon
                   3762919943489504256##
                   5463706964232835171##
                   $trModule
                   $tcBox1
                   0#
                   krep$*) -}
a17ae58f535cae3cdc5935292b38f36f
  $tcBox1 :: TrName
  {- HasNoCafRefs, Strictness: m1, Unfolding: (TrNameS $tcBox2) -}
c204845bdc51d85d786840caaa5a1171
  $tcBox2 :: Addr#
  {- HasNoCafRefs, Unfolding: ("Box"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Module $trModule3 $trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: TrName
  {- HasNoCafRefs, Strictness: m1, Unfolding: (TrNameS $trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: TrName
  {- HasNoCafRefs, Strictness: m1, Unfolding: (TrNameS $trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b40682de197fe4d5243f3954d7ef71f8
  newtype Box = Box Int
ec7e1801e1928c0c695a46fc877dc0bc
  alfa :: [Int]
  {- Unfolding: (eftInt 0# 0#) -}
9f5e5d1f27141a704b761b0b0971e5a8
  external :: Bool
  {- Unfolding: (case runRW#
                        @ ('TupleRep '['TupleRep '[], 'LiftedRep])
                        @ (# State# RealWorld, Bool #)
                        external1 of ds { (#,#) ipv ipv1 ->
                 ipv1 }) -}
4c4d3275c480eb2299e38c483273ee6b
  external1 :: State# RealWorld -> (# State# RealWorld, Bool #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: State# RealWorld)[OneShot] ->
                 case noDuplicate# @ RealWorld s of s' { DEFAULT ->
                 case alfa of wild {
                   [] -> case badHead ret_ty (# State# RealWorld, Bool #) of {}
                   : x ds1
                   -> case x of wild1 { I# ds ->
                      case ds of ds2 {
                        DEFAULT -> case external3 ret_ty (# State# RealWorld, Bool #) of {}
                        0#
                        -> case {__pkg_ccall_GC base-4.10.0.0 State# RealWorld
                                                              -> (# State# RealWorld #)}
                                  s' of wild2 { Unit# ds3 ->
                           (# ds3,
                              case reallyUnsafePtrEquality# @ Int wild1 external2 of wild3 {
                                DEFAULT -> False 1# -> True } #) } } } } }) -}
8259818ce3e75aea005f8c7682a56616
  external2 :: Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (I# 0#) -}
eae0910fcc606a50139332a181a3ada3
  external3 :: Box
  {- Strictness: x -}
e836d135c19d0fcf4411ecc05edb9f0f
  main :: IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                main1 `cast` (Sym (N:IO[0] <()>_R)) -}
e802c305587289df853a32b7314e44a9
  main1 :: State# RealWorld -> (# State# RealWorld, () #)
  {- Arity: 1, Unfolding: (hPutStr2 stdout main2 True) -}
c36fa6a40c7015e2df48f2f4cfffadee
  main2 :: String
  {- Unfolding: (case runRW#
                        @ ('TupleRep '['TupleRep '[], 'LiftedRep])
                        @ (# State# RealWorld, Bool #)
                        main3 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   False -> $fShowBool3 True -> $fShowBool1 } }) -}
78a2b87bb192d3db1c857c3d67b60f6b
  main3 :: State# RealWorld -> (# State# RealWorld, Bool #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: State# RealWorld)[OneShot] ->
                 case noDuplicate# @ RealWorld s of s' { DEFAULT ->
                 case alfa of wild {
                   [] -> case badHead ret_ty (# State# RealWorld, Bool #) of {}
                   : x ds1
                   -> case x of wild1 { I# ds ->
                      case ds of ds2 {
                        DEFAULT -> case main4 ret_ty (# State# RealWorld, Bool #) of {}
                        0#
                        -> case {__pkg_ccall_GC base-4.10.0.0 State# RealWorld
                                                              -> (# State# RealWorld #)}
                                  s' of wild2 { Unit# ds3 ->
                           (# ds3,
                              case reallyUnsafePtrEquality# @ Int wild1 external2 of wild3 {
                                DEFAULT -> False 1# -> True } #) } } } } }) -}
4e21db36d9aa2f0dbc01523175f2fc63
  main4 :: Box
  {- Strictness: x -}
643950e6bf961727f6736bb81d421a82
  main5 :: State# RealWorld -> (# State# RealWorld, () #)
  {- Arity: 1,
     Unfolding: (runMainIO1 @ () main1 `cast` (Sym (N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

